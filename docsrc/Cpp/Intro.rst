C++ 简介
================

C++ 是一门编译型语言，需要将写有 C++ 代码的源文件通过编译器执行编译流程、生成为可执行文件后，才能执行。这与诸如 Python 等通过解释器直接执行代码的解释型语言不同。

本节不过多地用术语来定义 C++，而是试图讨论一些关于 C++ 的情况：

* **C++ 的学习难度**\ ：人们通常认为 C++ 对学习者来说是一门艰难的语言，不过我认为对这一点尚值得做一些说明。我认为 C++ 的学习难度主要体现在以下几点：

  * :uline:`C++ 拥有庞大的语法特性`\ ，例如模板、指针等有特色内容。不过，就像我们不会掌握大部分编程语言的所有特性一样，你也并不是要一次性学完 C++ 的所有特性。
  * :uline:`C++ 语法有很多历史包袱`\ ，尤其是传统 C++（即 C++ 11 标准之前）的内容，以及对 C 语言的一些兼容特性。初学者在学习过时的教程或者学习多个标准的不同的教程时，可能会感到困惑；在阅读他人的 C++ 代码时，也可能见到一些从未见过的用法，因此感到沮丧。
  * :uline:`C++ （以及库）的安装与配置困难`\ 。尽管这在今天已经极大地改善，也有了 vcpkg 等库管理工具，但首次配置 C++ 环境的复杂度仍然是高于许多其他编程语言的。好消息是，你确实只需要配置一次。
  * :uline:`C++ 存在一些外部学习成本`\ 。由于 C++ 是一门编译型语言，因此还需要了解编译工具（如 CMake）的基础用法。这是主要的外部成本；不过在更高层次的学习中，你可能还需要了解一些其他内容。例如，C++ 社区流行不止一种编译器，它们存在一些差别。C++ 程序可以在多种不同的环境中运行，但需要分别编译，且可能在代码中需要进行区分……但总的来说，在初学阶段不用忧虑这些。

* **如何发挥 C++ 性能优势**：\ C++ 在编程语言中属于执行效率较高的。但是，这并不意味着你用糟糕的代码也能获得性能优势。了解计算机以及 C++ 的一些基础工作原理（如缓存、内存分配），合理地使用 C++ 语法，才能写出高性能的代码。


为什么学习 C++
--------------------

其实与大部分流行过的编程语言没什么不同，C++ 语法本身也是易写的。不过我们总是在陷入一种争论：更易写与更优性能的权衡。当然，这两者并不是完全冲突的，不过太多语言都被这样放在天平两端进行比较过，而 C++ 就是天平上“高性能但不易写”那一端的常客。

.. admonition:: Python 与 C++：简便灵活的代价
   :class: note

   Python 可能是最常被用来与 C++ 对比的语言，也是我的主力编程语言之一。我喜欢 Python，但我不赞同“C++ 对于 Python 也只剩性能优势了”这一种观点。当然，对于编程语言初学者而言，Python 比 C++ 在易写上要好上太多，因为前者的语法特性要少得多（简便），而且拥有更少的约束（灵活）。关于两者在安装、配置、运行上的难易差别，我想也不用我再赘述。除了性能优势，C++ 对 Python 还有什么优势吗？尤其是在我们编写代码的时候？有的。Python 语法的简便与灵活性实际上带来了一些在编写时的问题。
    
   一个典型的例子是 Python 对变量类型的随意性。例如，Python 不需要声明变量（的类型）、允许一个变量被设置为任何类型。这一点在最开始学习时会感觉非常方便，比 C++ 的声明定义分离要简单得多；但在使用一段时间的 Python 后，你慢慢会感觉到这种类型灵活对于代码维护的有害性：

   其一是，我们容易记不清一个 Python 变量是什么类型的。尽管这听起来有些可笑，但如果你真的阅读过自己一年前写的长达数百行的 Python 代码，我相信你此时笑不出来。在 C++ 中，普通变量的类型是固定的，任何语法检查工具都能轻松地帮你回忆起该变量的类型。虽然在 Python 中，你可以通过引入 typing 包并显式地指明类型来解决相当一部分的高亮问题（那这样写 Python 与写 C++ 在易写性上还有什么区别？）；但是这种“类型指明”是脆弱的（因为在代码中你仍然可以把变量赋值为任何类型，即使你是不小心这样做的），且错误可能很隐蔽。

   其二是，Python 的类型标识中没有常量。在当初了解到这一点时，我是非常惊讶的。在 C++ 中，常量是非常重要的概念，尤其是对于类的成员函数而言。把一个变量声明为常量，可以完全杜绝了对它意外修改的可能。而把类的一个成员函数声明为常量，则表示它不会更改调用它的类的实例。同时，一个被声明为常量的实例由于不能被修改，故只能调用类的常量成员函数。这一套逻辑是严丝合缝的，在我们调试时对缩小错误代码的范围也很有帮助。

   我还可以列举更多关于 Python 变量类型的问题，比如它允许函数参数为任何类型，其中包括空（None）。但我其实挺喜欢 Python 的，甚至本文也是用 Python 构建的，所以不如让我们到此为止吧。至少它没有像 JavaScript 一样让 ``3 + '2'`` 得到 ``"32"``\ ，这就够了。

   简而言之，有时 Python 的语法\ *允许*\ 你去做一件事情，但这件事可能\ *不应该*\ 这样去做；可惜的是，如果你真这样做了，语法检查工具不会警告你，解析器也不会用报错来阻止你。C++ 中也存在这种“能做但不该做”的事，但我认为比 Python 要少得多。很多“坏习惯”根本不等你养成，C++ 语法检查工具就告诉你不能这样做；如果你坚持，编译器会直接用错误来回应你。编译器（以及语法检查工具）不会记错变量类型、不会敲错键盘、不会精神不振，它比我们人类更加可靠。C++ 编译器能够帮我们提前发现错误或坏习惯，我们应当意识到能尽早定位问题在代码编写上是一种优势。

即使说 C++ 在编写上确有可取之处，它也至少不是最易写的那一档。那么，我们为什么学习 C++？你可以从以下几点中找一种理由：

* 你想尝试一门新的编程语言。
* 你的程序有高性能需求。
* 你需要一门编程语言来帮助你更多地了解计算机的工作：例如，内存分配、地址、缓存命中等。
* 你希望使用一门更严谨的语言。更严格的类型转换检查，控制引用与拷贝操作，不允许 None/Null 变量……因为你是一个严谨的人，或者你认为编程语言语法的条条框框有助于让代码错误更早地暴露出来。
* 你希望更紧密地与硬件交互，极致地利用硬件性能或者适配不同的硬件环境。
* 你的课程或工作严格要求使用 C++。我把这一条放在最后，因为我不希望你会用上它；或者说，就算你因为这一条理由开始学习 C++，也不要在学习的最后仍然以这条理由结尾。C++ 有它独特的优势、特色，感受编程语言的这些内容才是支撑你学习它的动力。就像你不应该在旅游点一下车就直奔“打卡点”去拍一张照片就立刻返回一样——如果你不能在旅程中自己感受美丽并记录它们，那这趟旅程对你其实乏善可陈。


教程的选择
--------------

我建议读者这样选择 C++ 的教程：

* **选定单个 C++ 教程进行学习**\ 。不要同时学习多个教程。
* **教程的长度应当适中**\ 。C++ 的书籍很容易成为大部头。大部头的归宿一般有两种：一是成为字典式的查阅工具，二是用来垫桌脚。这其中的哪一种对初学者来说都不是作为教程的好选择。C++ 教程如果做不到像精彩小说一样吸引读者（哦没人能做到），那么它就应当控制篇幅。
* **教程需要涵盖较近的 C++ 标准**\ 。例如，在 C++ 20 标准已经完全在编译器中实现时，读者至少应该学习 C++ 17 标准的教程。新的 C++ 标准很可能优化了一些用法（语法更简单或者执行更高效），典型的例子如 ``<algorithm>`` 或 ``<utility>`` 标准库提供的一系列函数。
* 教程最好标出某一种现代语言特性是在哪一个 C++ 标准引入的。这是因为在实际环境中，我们可能被迫使用较早标准版本的 C++，因此对一些较早的用法有时也需要进行一些了解。
* 如果你觉得我说的以上都对，那么至少看一眼本文再走吧！

在系统地学习教程后，你可能需要专注于学习在某一语法特性（例如模板）、某一实践领域（例如），或者某一些库上的 C++ 用法。这需要你寻找和阅读专门的教程、文档，或者源代码。


本文的目标
----------------

本笔记并不是严格意义上的教程，因为它主要是我的个人记录。它可能并不全面，但它确实是在学习与实践中积累的。

如果可能，我将尽量做到上一节中提到的教程特点，以使本文的潜在的读者受益。

* 主要基于 C++ 20 标准，少部分 C++ 23 内容
* 尽量系统地（而不是碎片化地）介绍 C++
* 少概念，多实例。
* 尽可能地标注每一个现代语法特性由哪一标准版本的 C++ 引入。
