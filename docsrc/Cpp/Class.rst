类
======

在 C++ 或者其他面向对的编程语言中，\ **类**\ （Class）是一个重要的设计概念。它允许我们在内置数据类型之上定义新的数据类型。C++ 可以使用 ``struct`` 或者 ``class`` 关键字来定义类。

struct 结构体
-----------------

C++ 可以使用 ``struct`` 关键字来定义结构体，并提供向 C 语言的兼容。结构体本质上是一种类，只是它的成员默认是公有的（可以从外部访问）。下例声明了一个名为 Point 的类：

.. code-block:: cpp
   :linenos:

   struct Point {
       double x;
       double y;
   };

* 在类中，可以定义类的变量或函数，它们称为类的\ **成员**\ （Member）。以上 Point 类定义了两个成员变量，均为 double 类型。
* 注意上述类的声明在花括号的结束之后有一个分号。
* 在习惯上，类的名字使用 *大写字母开头*\ ，以与内置的类（例如 ``std::vector``\ ）区分。

要声明或定义一个类型为 Point 的变量，其语法类似于内置类型：

.. code-block:: cpp
   
   // 声明一个 Point 类型的变量 p1
   Point p1;

   // 定义一个 Point 类型的变量 p2
   // 并用 {1, 2} 来初始化它的成员 y1, y2
   Point p2 {1, 2};

要使用一个类的成员，使用点 ``.`` 来连接类对象名与成员名，例如 ``p2.y``\ 。

.. admonition:: 通过指针来访问类对象的成员（\ `->` 符）
   :class: hint

   特别地，如果我们有一个指向类对象的指针 ``ptr``\ ，我们需要通过 ``(*ptr).member`` 的方式来访问它的成员。C++ 为此提供了一种简便的语法，即 ``ptr->member`` 。例如：

下面是一个例子：

.. literalinclude:: codes/class/struct.cpp
   :linenos:
   :language: cpp

输出结果：

.. code-block:: console
   
   p.x = 1
   p.y = 2.3
   ptr->x = 1

在 struct 结构体中，我们也可以使用私有成员、定义构造函数、重载运算符等，就像 class 中可以做的一样；实际上，struct 与 class 也并没有本质的区别。我们会在下面的章节介绍这些内容。


class 类
-------------

在类 ``class`` 的定义中，默认所有成员都是私有的。我们可以使用 ``public:`` 来指定其后的内容为公有，也可以使用 ``private:`` 来指定其后的内容为私有。例如：

.. literalinclude:: codes/class/class.cpp
   :linenos:
   :language: cpp

关于类的构造函数，我们会在 :ref:`class-constructor` 一节中讨论。上例的输出为：

.. code-block:: console

   p = (1, 1)
   length = 1.41421

.. admonition:: 习惯上将类的公有内容放在前
   :class: hint  
   
   虽然不强制，但在习惯上，我们一般先声明类的公有成员，再声明类的私有成员。这通常是出于设计与使用逻辑的考虑。一个类的公有成员决定了我们能如何从外部使用这个类，也即提供了这个类的接口（Interface）；而私有成员则为接口中的功能提供了具体的代码实现（Implementation）。

   :uline:`从代码编写的角度来看`\ ，我们在创建一个类时，先思考接口的设计、再为接口提供具体的代码实现，因此接口内容在先；:uline:`从代码阅读的角度来看`\ ，使用该类的用户只关心如何去从外部访问与使用这个类（公有成员），而不关心类的内部（私有成员），因此公有成员在先。不管从哪方面考虑，我们都倾向于把公有成员的内容放在前面。

.. _class-constructor:

构造函数
------------

.. _class-operator:

操作符的定义与重载
---------------------
