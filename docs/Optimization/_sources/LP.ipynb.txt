{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c4ecb0e6-1666-43bd-bdba-2b8a64564954",
   "metadata": {},
   "source": [
    "# 线性规划"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "906c4040-07be-4354-8fe3-5764a3a74840",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "线性规划（Linear Programming, LP）是最简单的优化问题类型，指**目标函数**与**约束条件**均是关于变量的线性函数的优化问题。"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "030f2393-be7a-4d95-8a77-2d5af82dbf3c",
   "metadata": {},
   "source": [
    "## 建立线性规划模型"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53054486-b9fd-40bf-a95d-eb38e63e2858",
   "metadata": {},
   "source": [
    "对于任何线性规划问题，我们通过下列步骤建立模型：\n",
    "\n",
    "1. 定义问题变量\n",
    "2. 给出目标函数\n",
    "3. 提供约束条件\n",
    "\n",
    "考虑以下工厂生产问题，我们将通过它了解线性规划的建模过程。\n",
    "\n",
    "---\n",
    "\n",
    "工厂现有的某机器能生产甲、乙、丙三种产品，它们的具体生产信息如下表所示：\n",
    "\n",
    "* 每种产品的单件利润\n",
    "* 每种产品在生产单件时所需的人工工时\n",
    "* 每种产品在生产单件时所需的机器工时\n",
    "* 每种产品的数量\n",
    "\n",
    "| 产品 | 利润 | 人工工时 | 机器工时 | 产品数量 |\n",
    "|------|------|----------|----------|----------|\n",
    "| A   | 10   | 2        | 4        |          |\n",
    "| B   | 7    | 0.5      | 3        |          |\n",
    "| C   | 3    | 1        | 1        |          |\n",
    "| 约束 |      | = 45     | <= 100   | <= 60    |\n",
    "\n",
    "假设该机器平均每周固定分配人工 45 小时、机器工作不超过 100 小时，且不应生产超过 60 件产品；生产的产品全部可以卖出。求如何分配三种产品的生产数量（允许是小数），使得平均每周的总利润最大。"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab8ac2fe-43e0-49eb-ab8c-c1149064bfc6",
   "metadata": {},
   "source": [
    "1. **定义问题变量**\n",
    "\n",
    "   该问题需要求解即每种产品的生产数量。因此，我们将产品 A、B、C 的生产数量作为变量，分别定义为 $x_1$, $x_2$ 与 $x_3$.\n",
    "\n",
    "2. **给出目标函数**\n",
    "\n",
    "   该问题的目标是最大化总利润，而每种产品的单位利润已经给出。将生产产品的数量与其利润相乘，最后求和，就得到总利润：\n",
    "\n",
    "   $$ \\max \\, 10x_1 + 7x_2 + 3x_3 $$\n",
    "\n",
    "   为了统一形式，本节将一律采用最小化问题的形式。我们可以将总利润乘以 $-1$ 并求其最小值（记为最小化目标函数 $z$）：\n",
    "\n",
    "   $$ \\min \\, z = -10x_1 - 7x_2 - 3x_3 $$\n",
    "\n",
    "3. **提供约束条件**\n",
    "\n",
    "   根据生产信息表格，我们用不等式约束机器工时、产品数量，用等式约束人工工时：\n",
    "\n",
    "   * 机器工时约束：$4x_1 + 3x_2 + x_3 \\leq 100$\n",
    "   * 产品数量约束：$x_1 + x_2 + x_3 \\leq 60$\n",
    "   * 人工工时约束：$2x_1 + 0.5x_2 + x_3 = 45$\n",
    "   \n",
    "   最后，每种产品的生产数量不能为负数：\n",
    "\n",
    "   * 非负约束：$x_1, x_2, x_3 \\geq 0$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2e79ee3-781f-43d6-a987-d5c17c4cc949",
   "metadata": {},
   "source": [
    "总结以上步骤，我们列出优化模型如下。由于目标函数与所有约束条件都是线性的，因此它是一个线性规划问题："
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e7cff30-37de-44d1-a526-399c17edbe0d",
   "metadata": {},
   "source": [
    "\\begin{align*}\n",
    "\\min\\ & z(x_1, x_2, x_3) = -10x_1 - 7x_2 - 3x_3 \\\\\n",
    "\\text{s.t.}\\quad & 4x_1 + 3x_2 + x_3 \\leq 100 \\\\\n",
    "& x_1 + x_2 + x_3 \\leq 60 \\\\\n",
    "& 2x_1 + 0.5x_2 + x_3 = 45 \\\\\n",
    "& x_1, x_2, x_3 \\geq 0\n",
    "\\end{align*}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6e22cfd-52ed-45c3-81bb-5111a80d09e1",
   "metadata": {},
   "source": [
    "或者其矩阵形式："
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9a959b3-b180-4187-ab94-1a0eb3d2d0d5",
   "metadata": {},
   "source": [
    "\\begin{align*}\n",
    "\\min\\ & z(x_1, x_2, x_3) = \\begin{pmatrix} -10 \\\\ -7 \\\\ -3 \\end{pmatrix}^T\n",
    "\\begin{pmatrix} x_1 \\\\ x_2 \\\\ x_3\\end{pmatrix} \\\\\n",
    "\\text{s.t.}\\quad & \\begin{pmatrix} 4 & 3 & 1 \\\\ 1 & 1 & 1 \\end{pmatrix}\n",
    "\\begin{pmatrix} x_1 \\\\ x_2 \\\\ x_3\\end{pmatrix}\n",
    "\\leq \\begin{pmatrix} 100 \\\\ 60 \\end{pmatrix} \\\\\n",
    "& \\begin{pmatrix} 2 & 0.5 & 1 \\end{pmatrix} \\begin{pmatrix} x_1 \\\\ x_2 \\\\ x_3 \\end{pmatrix} = 45\\\\\n",
    "& \\begin{pmatrix} x_1 \\\\ x_2 \\\\ x_3 \\end{pmatrix} \\geq \\begin{pmatrix} 0 \\\\ 0 \\\\ 0 \\end{pmatrix}\n",
    "\\end{align*}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "efd23362-b3e9-41cc-a8d2-491ee118e8ec",
   "metadata": {},
   "source": [
    "该矩阵形式可以进一步变形为一般形式，以减少矩阵的数量。这里我们将约束条件分为小于等于约束、等于约束与变量上下限约束三个部分，仅仅是便于后续的代码使用。"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ccd1153d-a01d-4040-97c4-a950e1bd3be4",
   "metadata": {},
   "source": [
    "## 线性规划的一般形式"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c20363b-cbc0-4adb-ab3f-e49a870ac91b",
   "metadata": {},
   "source": [
    "通过上述例题的模型建立，我们总结：对于拥有 $n$ 个变量、$m$ 个约束的线性规划，其模型的一般形式如下\n",
    "\n",
    "\\begin{align*}\n",
    "\\min \\quad & z(x) = c_1 x_1 + c_2 x_2 + \\dotsm + c_n x_n + d \\\\\n",
    "\\text{s.t.} \\quad & a_{11}x_1 + a_{12}x_2 + \\dotsm + a_{1n}x_n \\leq b_1 \\\\\n",
    "& a_{21}x_1 + a_{22}x_2 + \\dotsm + a_{2n}x_n \\leq b_2 \\\\\n",
    "& \\vdots \\\\\n",
    "& a_{m1}x_1 + a_{m2}x_2 + \\dotsm + a_{mn}x_n \\leq b_m\n",
    "\\end{align*}\n",
    "\n",
    "或者，我们使用其矩阵标准形式：\n",
    "\n",
    "\\begin{align*}\n",
    "\\min \\quad & z(x) = c^T x \\\\\n",
    "\\text{s.t.} \\quad & \\boldsymbol{A}x \\leq b\n",
    "\\end{align*}\n",
    "\n",
    "其中变量 $x \\in \\mathbb{R}^n$ 是 n 维向量，$c \\in \\mathbb{R}^n$ 描述了组成目标函数的参数，$\\boldsymbol{A} \\in \\mathbb{R^{m\\times n}}$ 与 $b \\in \\mathbb{R^m}$ 描述了关于变量 $x$ 的 m 个不等式约束条件。\n",
    "\n",
    "对于一个不符合标准形式的线性规划模型，我们可以通过以下技巧（在引言中已有所介绍），将其等价变形为标准形式：\n",
    "\n",
    "* **目标函数中的常数项**：由于目标函数中的常数 $d \\in \\mathbb{R}$ 的取值不影响最优解 $x^*$ 的求解结果，因此我们可以将它省略。\n",
    "* **最小化与最大化目标函数**：对于求函数 $z(x)$ 最大值的目标函数，我们可以将其转为求 $-z(x)$ 的最小值。\n",
    "\n",
    "  $$ \\max\\,z(x) \\iff \\min\\,-z(x) $$\n",
    "  \n",
    "* **大于等于形式的约束**：对于大于等于形式的不等式约束 $\\boldsymbol{A}_{geq} x \\geq b_{geq}$，我们可以将两边乘以 $-1$ 来将其转变为小于形式的约束：\n",
    "\n",
    "  $$ \\boldsymbol{A}_{geq} x \\geq b_{geq} \\iff -\\boldsymbol{A}_{geq} x \\leq -b_{geq} $$\n",
    "\n",
    "* **等于形式的约束**：对于等于形式的约束 $\\boldsymbol{A}_{eq} x = b_{eq}$，我们可以用一个大于等于约束与一个小于等于约束来描述，然后进一步转为两个不等式描述：\n",
    "\n",
    "  $$\n",
    "  \\boldsymbol{A}_{eq} x = b_{eq} \\iff\n",
    "  \\begin{cases} \\boldsymbol{A}_{eq} x \\leq b_{eq} \\\\ \\boldsymbol{A}_{eq} x \\geq b_{eq} \\end{cases}\n",
    "  \\iff \\begin{cases} \\boldsymbol{A}_{eq} x \\leq b_{eq} \\\\ -\\boldsymbol{A}_{eq} x \\leq -b_{eq} \\end{cases}\n",
    "  $$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ecd4994f-386f-46a7-8d01-0d3f1667a59e",
   "metadata": {},
   "source": [
    "## 线性规划的代码求解"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f28e62f-a03e-4c8c-91cd-c58fd792d69a",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "关于线性规划的代码求解，我们有很多工具可以使用。本节将会使用："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c6de2bc9-2136-47b4-b2ff-b812cef6f566",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "scipy\t1.14.1\n",
      "cvxpy\t1.6.4\n"
     ]
    }
   ],
   "source": [
    "import scipy\n",
    "import cvxpy\n",
    "\n",
    "for lib in (scipy, cvxpy):\n",
    "    print(lib.__name__, lib.__version__, sep='\\t')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d2da08f-e097-4f8c-b8b3-dcd507ba6863",
   "metadata": {},
   "source": [
    "## scipy.optimize.linprog"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d850d51b-ebd7-423d-8ecc-81bcf81e3a17",
   "metadata": {},
   "source": [
    "Scipy 可能是许多人第一次在 Python 上解线性规划问题时使用的工具。`scipy.optimize.linprog` 允许我们使用在矩阵形式中使用小于等于约束、等式约束，以及变量上下限约束：\n",
    "\n",
    "\\begin{align*}\n",
    "\\min\\ & z(x) = c^T x \\\\\n",
    "\\text{s.t.}\\quad & \\boldsymbol{A}_{leq} x \\leq b_{leq} \\\\\n",
    "& \\boldsymbol{A}_{eq} x = b_{eq} \\\\\n",
    "& \\ell \\leq x \\leq u\n",
    "\\end{align*}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c137ac12-b13c-4a35-a4cd-06eb13ea6f41",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully. (HiGHS Status 7: Optimal)\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from scipy.optimize import linprog\n",
    "\n",
    "c = np.array([-10, -7, -3])\n",
    "A_leq = np.array([[4, 3, 1],\n",
    "                  [1, 1, 1]])\n",
    "b_leq = np.array([100, 60])\n",
    "A_eq = np.array([[2, 0.5, 1]])\n",
    "b_eq = np.array([45])\n",
    "x_bounds = [(0, None) for _ in range(3)]\n",
    "\n",
    "result = linprog(c, A_leq, b_leq, A_eq, b_eq, bounds=x_bounds)\n",
    "print(result.message)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a1d196b-320d-469e-a171-045ddca170d7",
   "metadata": {},
   "source": [
    "以上 Optimal 状态信息表示 LP 问题成功解得最优值。我们利用 `result.x` 查看取得最优值时，变量的取值："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "34ab2a29-8570-43ed-9fb3-6a1548fdbb0f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0., 22., 34.])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = np.array(result.x)\n",
    "x"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f2dd822-f821-48e7-bd74-314ec222f957",
   "metadata": {},
   "source": [
    "查看目标函数最优值 `result.fun` ，或者使用 `c @ x` 手动计算："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e07f12cd-fcf1-4ce5-aa57-fcc5a8924a55",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimal:\t -256.0\n",
      "Manual compute:\t -256.0\n"
     ]
    }
   ],
   "source": [
    "print(\"Optimal:\\t\", result.fun)\n",
    "print(\"Manual compute:\\t\", c @ x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6432eaa8-f4de-4613-998d-c98e7ea26892",
   "metadata": {},
   "source": [
    "还可以用 `result.slack` 查看不等式约束的满足情况，或用 `result.con` 查看等式约束的满足情况："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "375c76de-076e-4365-a32f-cd931ddbe8fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Leq constraints: [0. 4.]\n",
      "\tresult.slack = array([0., 4.])\n",
      "Eq constraints: [0.]\n",
      "\tresult.con = array([0.])\n"
     ]
    }
   ],
   "source": [
    "print(f\"Leq constraints: {b_leq - (A_leq @ x).flatten()}\",\n",
    "      f\"\\t{result.slack = }\", \n",
    "      f\"Eq constraints: {b_eq - (A_eq @ x).flatten()}\",\n",
    "      f\"\\t{result.con = }\",\n",
    "      sep='\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5359bb0f-f17f-4470-9753-ed139bdfd04b",
   "metadata": {},
   "source": [
    "## cvxpy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d36af121-d092-42bd-95e7-e06d9939ae72",
   "metadata": {},
   "source": [
    "cvxpy 的用法也比较类似，不过需要用 `cvxpy.Variable()` 方法声明变量。\n",
    "\n",
    "* cvxpy 可以使用 `<=` 或者 `>=` 来表示带等的不等于号；但是，不能像 `1<= x <=2` 这样连写。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8bc7109d-cab5-482c-ab5b-bfc35496997b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.float64(-255.99999999194907)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import cvxpy as cp\n",
    "\n",
    "c = np.array([-10, -7, -3])\n",
    "A_leq = np.array([[4, 3, 1],\n",
    "                  [1, 1, 1]])\n",
    "b_leq = np.array([100, 60])\n",
    "A_eq = np.array([[2, 0.5, 1]])\n",
    "b_eq = np.array([45])\n",
    "\n",
    "x = cp.Variable(3)\n",
    "x_lower = np.zeros(3)\n",
    "problem = cp.Problem(cp.Minimize(c @ x),\n",
    "                     [A_leq @ x <= b_leq, A_eq @ x <= b_eq, x >= x_lower])\n",
    "problem.solve()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "527a2ea5-7740-4815-9e1e-344dc7b8291e",
   "metadata": {},
   "source": [
    "LP 问题的解结果（例如，求得最优 `cvxpy.OPTIMAL` 、不可行 `cvxpy.INFEASIBLE` 或者未约束 `cvxpy.UNBOUNDED` 等）："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1ec1bb42-f4fd-4727-90f7-e84b17a6cf39",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Status: optimal\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "print(f\"Status: {problem.status}\")\n",
    "print(problem.status == cp.OPTIMAL)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5fa0a09-6ded-4f88-92c6-a1917dd9ea42",
   "metadata": {},
   "source": [
    "LP 问题的解存放在 `x.value` 与 `problem.value` 中："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3a378bc6-c7c3-4b4c-b4d1-41adf86b7386",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A feasible solution:\t [9.27094654e-09 2.20000000e+01 3.40000000e+01]\n",
      "Optimal value:\t\t -255.99999999194907\n"
     ]
    }
   ],
   "source": [
    "print(\"A feasible solution:\\t\", x.value)\n",
    "print(\"Optimal value:\\t\\t\", problem.value)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "088f4641-30f5-4b12-a688-29058f044bf9",
   "metadata": {},
   "source": [
    "对偶解（Dual Solution）中符号为正的第 *i* 个值表示在最优解时约束 $a_i x \\leq b_i$ 恰好取得等号。这也意味着改变 $b_i$ 会引起最优解的改变。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "372400a9-21a3-45fd-8423-db3a88a26853",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dual solution:\n",
      "    A_leq      [2.20000000e+00 8.68986474e-10]\n",
      "    A_eq       [0.8]\n",
      "    x_bounds   [3.99999999e-01 8.81435962e-11 5.94961809e-11]\n"
     ]
    }
   ],
   "source": [
    "constraint_labels = [\"A_leq\", \"A_eq\", \"x_bounds\"]\n",
    "print(\"Dual solution:\")\n",
    "for cgroup, label in zip(problem.constraints, constraint_labels):\n",
    "     print(f\"    {label:<10}\", cgroup.dual_value)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33288277-829e-49ba-8589-bd83fce77616",
   "metadata": {},
   "source": [
    "我们传入了三组约束。在上述对偶解中，小于号约束组 `A_leq` 的第二值为 0，表示原问题的 $x_1 + x_2 + x_3 \\leq 60$ 是松弛的（在最优解时未取得等号）。同理，变量约束组 `x_bounds` 的第二、三值也是松弛的，表示 $x_2, x_3$ 的最优解值不在边界上（而显然 $x_1^* = 0$ 在边界上）。"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
